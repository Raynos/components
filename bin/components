#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const stylus = require('stylus')
const mkdirp = require('mkdirp')
const argv = require('minimist')(process.argv.slice(2))
const pkgComponents = require('../package.json')
const pkgTonic = require('../node_modules/tonic/package.json')

const toCSS = str => ({
  then (resolve) {
    stylus(str).render((err, css) => resolve({ err, css }))
  }
})

const componentsDir = path.join(__dirname, '..', 'src')

const re = /%style%/

async function js () {
  try {
    fs.statSync(argv.js)
  } catch (err) {
    mkdirp.sync(argv.js)
  }

  const dirs = argv._.length ? argv._ : fs.readdirSync(componentsDir)
  const output = []

  for (const dir of dirs) {
    try {
      fs.statSync(path.join(componentsDir, dir))
    } catch (err) {
      console.error(`No such component, ${dir}`)
      process.exit(1)
    }

    const styl = path.join(componentsDir, dir, 'index.styl')
    const src = path.join(componentsDir, dir, 'index.js')
    const { err, css } = await toCSS(fs.readFileSync(styl, 'utf8'))

    if (err) {
      console.error(err.message)
      process.exit(1)
    }

    const srctext = fs.readFileSync(src, 'utf8')

    if (argv.inline === false) {
      output.push(srctext.replace(re, ''))
      fs.appendFileSync(path.join(argv.css, 'index.css'), `${css}\n`)
    } else {
      output.push(srctext.replace(re, () => css))
    }
  }

  const bundled = `
//
// Warning. Do not edit. This is a generated file.
//
${fs.readFileSync(path.join('node_modules', 'tonic', 'index.js'), 'utf8')}
window.Tonic = Tonic
${output.join('\n')}
  `

  const js = argv.bundle ? bundled : output.join('\n')

  fs.writeFileSync(path.join(argv.js, 'index.js'), js)
}

function css () {
  const css = fs.readFileSync(path.join(__dirname, '..', 'index.css'), 'utf8')
  fs.writeFileSync(path.join(argv.css, 'index.css'), css)
}

const help = `
components v${pkgComponents.version} (tonic v${pkgTonic.version})

Usage:
  components --help
  components --js <path> [--wrap] --css <path> [--no-inline] [component-name...]

Examples:
  components --js ./js --css ./css --no-inline
  components --js ./js --bundle --css ./css
  components --js ./js --css ./css content-dialog input-button
`

if (argv.v || argv.version) {
  console.log(pkgComponents.version)
}

if (argv.h || argv.help) {
  console.log(help)
  process.exit(0)
}

if (argv.css) css()
if (argv.js) js()
