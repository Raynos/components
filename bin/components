#!/usr/bin/env node
const fs = require('fs').promises
const path = require('path')
const stylus = require('stylus')

const toCSS = str => ({
  then (resolve) {
    stylus(str).render((err, css) => resolve({ err, css }))
  }
})

const componentsDir = path.join(__dirname, '..', 'src')

const re = /%style%/

async function main () {
  const args = process.argv.slice(2)
  const dest = args[0]
  const dirs = args[1] || await fs.readdir(componentsDir)
  const output = []

  for (const dir of dirs) {
    try {
      await fs.stat(path.join(componentsDir, dir))
    } catch (err) {
      console.log(`No such component, ${dir}`)
      process.exit(1)
    }

    console.log(` -> compiling ${dir}`)

    const styl = path.join(componentsDir, dir, 'index.styl')
    const src = path.join(componentsDir, dir, 'index.js')
    const { err, css } = await toCSS(await fs.readFile(styl, 'utf8'))

    if (err) {
      console.error(err.message)
      process.exit(1)
    }

    const js = await fs.readFile(src, 'utf8')
    output.push(js.replace(re, () => css))
  }

  const js = `
    document.addEventListener('DOMContentLoaded', e => {
      ${output.join('\n')}
    })
  `

  const css = await fs.readFile('index.css', 'utf8')
  await fs.writeFile(path.join(dest, 'index.js'), js)
  console.log(' -> writing index.js')

  await fs.writeFile(path.join(dest, 'index.css'), css)
  console.log(' -> writing index.css')
}

main()
