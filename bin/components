#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const mkdirp = require('mkdirp')
const argv = require('minimist')(process.argv.slice(2))

const componentsDir = path.join(__dirname, '..', 'src')

function ensurePath (filename) {
  try {
    fs.statSync(path.dirname(filename))
  } catch (err) {
    mkdirp.sync(path.dirname(filename))
  }
}

function trim (s) {
  return s.split(/\n/).map(s => s.slice(4))
}

const filename = argv._[0]

async function main () {
  ensurePath(filename)

  const includes = argv.include && argv.include.split(' ')
  const excludes = argv.exclude && argv.exclude.split(' ')

  const dirs = fs.readdirSync(componentsDir).filter(dir => {
    if (includes) return includes.includes(dir)
    if (excludes) return !excludes.includes(dir)
    return dir
  })

  const output = []

  for (const dir of dirs) {
    try {
      fs.statSync(path.join(componentsDir, dir))
    } catch (err) {
      console.error(`No such component, ${dir}`)
      process.exit(1)
    }

    const src = path.join(componentsDir, dir, 'index.js')
    output.push(fs.readFileSync(src, 'utf8'))
  }

  const wrapper = trim(`
    //
    // Warning: Do not edit, use 'npm run build'.
    //
    module.exports = (Tonic, nonce) => {
      if (nonce) Tonic.nonce = nonce

      ${output.join('\n')}
    }
  `)

  fs.writeFileSync(filename, wrapper)
}

main()
