#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const mkdirp = require('mkdirp')
const argv = require('minimist')(process.argv.slice(2))
const pkgComponents = require('../package.json')
const pkgTonic = require('tonic/package.json')

const componentsDir = path.join(__dirname, '..', 'src')

async function bundle () {
  const filename = argv._[0]
  try {
    fs.statSync(path.dirname(filename))
  } catch (err) {
    mkdirp.sync(path.dirname(filename))
  }

  const includes = argv.include && argv.include.split(' ')
  const excludes = argv.exclude && argv.exclude.split(' ')

  let dirs = fs.readdirSync(componentsDir).filter(dir => {
    if (includes) return includes.includes(dir)
    if (excludes) return !excludes.includes(dir)
    return dir
  })

  const output = []

  for (const dir of dirs) {
    try {
      fs.statSync(path.join(componentsDir, dir))
    } catch (err) {
      console.error(`No such component, ${dir}`)
      process.exit(1)
    }

    const src = path.join(componentsDir, dir, 'index.js')
    output.push(fs.readFileSync(src, 'utf8'))
  }

  const bundled = `
//
// Warning. Do not edit. This is a generated file.
//
${fs.readFileSync(path.join('node_modules', 'tonic', 'index.js'), 'utf8')}
${output.join('\n')}
`

  const js = argv.bundle ? bundled : output.join('\n')

  fs.writeFileSync(filename, js)
}

const help = `
components v${pkgComponents.version} (tonic v${pkgTonic.version})

Usage:
  components --help
  components <FILE> [--exclude '...']
  components <FILE> [--include '...']

Examples:
  components ./index.js
  components ./index.js --include 'content-dialog'
  components ./index.js --exclude 'content-dialog input-button'
`

if (argv.v || argv.version) {
  console.log(pkgComponents.version)
}

if (argv.h || argv.help) {
  console.log(help)
  process.exit(0)
}

bundle()
