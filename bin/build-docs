#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const marked = require('marked')

const componentsDir = path.join(process.argv[2])
const outputFile = path.join(__dirname, '..', 'docs', 'index.html')

const dirs = fs.readdirSync(componentsDir)

function page (toc, sections) {
  return `
    <html>
      <head>
        <meta charset="utf-8">
        <title>Tonic: Component Based Architecture</title>
        <link href="https://fonts.googleapis.com/css?family=Caudex|Poppins:400,600|Space+Mono" rel="stylesheet">
        <link href="index.css" rel="stylesheet">
      </head>

      <body>
        <nav>
          <a href="./index.html"><img src="./tonic.svg"></a>
          ${toc}
          <a href="#" class="footer">
            <span>Made by</span>
            <svg>
              <use xlink:href="./sprite.svg#cl_logo">
            </svg>
          </a>
        </nav>
        <main>
          ${sections}
        </main>
        <script src="bundle.js"></script>
      </body>
    </html>
  `
}

let toc = ''
let sections = ''

function readMarkdown () {
  let titles = []

  function wrapLink (str, i) {
    const selected = i === 0 ? 'selected' : ''

    return `
      <li>
        <a href="#${str.toLowerCase()}" class="${selected}">${str}</a>
      </li>
    `
  }

  function wrapSection (str, title) {
    return `<section id="${title.toLowerCase()}">${marked(str)}</section>`
  }

  for (const dir of dirs) {
    const s = fs.readFileSync(path.join(componentsDir, dir, 'README.md'), 'utf8')
    if (s) {
      const { 0: match } = /^#\s*(.*)[\n|\r]/.exec(s)
      if (!match) continue

      const title = match.slice(1).trim()
      titles.push(title)
      sections += wrapSection(s, title)
    }
  }

  titles = titles.sort().map(wrapLink)
  toc = `<ul>${titles.join('')}</ul>`
}

readMarkdown()
const html = page(toc, sections)

fs.writeFileSync(outputFile, html)
