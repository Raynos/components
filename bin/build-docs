#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const marked = require('marked')

const componentsDir = path.join(process.argv[2])
const outputFile = path.join(__dirname, '..', 'docs', 'index.html')
const dirs = fs.readdirSync(componentsDir)

const head = `
  <head>
    <title>Tonic - Component Based Architecture</title>
    <link href="https://fonts.googleapis.com/css?family=Caudex|Poppins:400,600|Space+Mono" rel="stylesheet">
    <link href="index.css" rel="stylesheet">
    <link rel="icon" type="image/png" href="./favicon.png">

    <meta http-equiv="Content-Type" charset="utf-8" content="text/html">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1 user-scalable=no">
    <meta name="description" content="Component Based Architecture">
  </head>
`

const intro = `
  <section id="intro">
    <div class="hero">
      <div class="logo"><img src="./tonic.svg" width="200px"></div>
      <p class="intro-copy"><span class="first-word">Tonic</span> is a minimalist component library inspired by React, based on Web Components.</p>
      <input-button value="View on Github"></input-button>
    </div>
    <p>
      A <b>component</b> is a fully self-contained set of styles, behaviors and
      layout. It usually solves a single problem in a way that makes it highly
      reusable. An example would be a <code>ProgressBar</code> or <code>InputToggle</code>.
    </p>
    <p>
      <b>Tonic</b> is a minimalist class library for building components inspired
      by <b>React</b> but built on top of new web standards &mdash; <b>Web
      Components</b>. This page documents a collection of components built
      with Tonic as well as how to build your own components using Tonic.
    </p>
    <div class="row">
      <h3>Features</h3>
      <div class="col">
        <ul>
          <li>Quickly read and understand the whole module, ~150 lines.</li>
          <li>React-like component composition.</li>
          <li>One-way data binding. Pipe data though connected components.</li>
        </ul>
      </div>
      <div class="col">
        <ul>
          <li>Based on standard web technologies.</li>
          <li>Events as class methods, not scattered inline.</li>
          <li>Bring your own Routers, Reducers, Validators, etc.</li>
        </ul>
      </div>
    </div>
  </section>
`

const custom = `
  <section id="custom">
    ${marked(fs.readFileSync(path.join(__dirname, '..', 'docs', 'custom.md'), 'utf8'))}
  </section>
`

function page (toc, sections) {
  return `
    <html>
      ${head}

      <body>
        <nav>
          <a href="./index.html"><img src="./tonic.svg"></a>
          ${toc}
        </nav>
        <main>
          ${intro}

          ${sections}

          ${custom}

          <footer>
            <a href="#">
              <span>Made by</span>
              <svg>
                <use xlink:href="./sprite.svg#cl_logo">
              </svg>
            </a>
          </footer>
        </main>
        <script src="bundle.js"></script>
      </body>
    </html>
  `
}

let toc = ''
let sections = []

function readMarkdown () {
  let titles = []

  function wrapLink (str, i) {
    const selected = i === 0 ? 'selected' : ''

    return `
      <li>
        <a href="#${str.toLowerCase()}" class="${selected}">${str}</a>
      </li>
    `
  }

  function wrapSection (str, title) {
    return `<section id="${title.toLowerCase()}">${marked(str)}</section>`
  }

  for (const dir of dirs) {
    const s = fs.readFileSync(path.join(componentsDir, dir, 'README.md'), 'utf8')
    if (s) {
      const { 0: match } = /^#\s*(.*)[\n|\r]/.exec(s)
      if (!match) continue

      const title = match.slice(1).trim()
      titles.push(title)
      sections.push({ title, content: wrapSection(s, title) })
    }
  }

  titles = titles.sort((a, b) => a.localeCompare(b))

  titles.unshift('Intro')
  titles.push('Custom')
  titles = titles.map(wrapLink)

  toc = `<ul>${titles.join('')}</ul>`
}

readMarkdown()

sections = sections
  .sort((a, b) => a.title.localeCompare(b.title))
  .map(section => section.content)

const html = page(toc, sections.join(''))

fs.writeFileSync(outputFile, html)
