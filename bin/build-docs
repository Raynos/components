#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const marked = require('marked')
const hl = require('highlight.js')

marked.setOptions({
  renderer: new marked.Renderer(),
  highlight: (code, lang = 'javascript', escaped) => {
    return hl.highlight(lang, code).value
  }
})

const componentsDir = path.join(__dirname, '..', 'src')
const outputFile = path.join(__dirname, '..', 'docs', 'index.html')
const dirs = fs.readdirSync(componentsDir)

const read = (...args) => {
  try {
    return fs.readFileSync(path.join(...args), 'utf8')
  } catch (e) {
    return ''
  }
}

const append = (s) => {
  fs.appendFileSync(path.join(__dirname, '..', 'docs', 'bundle.js'), s)
}

function page (toc, sections) {
  return `
    <!DOCTYPE html>

      ${read(__dirname, '..', 'docs', 'src', 'head.html')}

      <body>
        <div class="theme-picker">
          <svg>
            <use xlink:href="./sprite.svg#theme">
          </svg>
        </div>
        <nav>
          <a href="./index.html" class="logo">
            <svg>
              <use xlink:href="./sprite.svg#tonic_logo">
            </svg>
          </a>

          ${toc}

        </nav>
        <main>

          <section id="intro">
            ${read(__dirname, '..', 'docs', 'src', 'intro.html')}
          </section>

          ${sections}

          <section id="custom">
            ${marked(read(__dirname, '..', 'docs', 'src', 'custom.md'))}
          </section>

          <footer>
            <a href="#">
              <span>Made by</span>
              <svg>
                <use xlink:href="./sprite.svg#cl_logo">
              </svg>
            </a>
          </footer>
        </main>
        <script src="bundle.js"></script>
      </body>
    </html>
  `
}

let toc = ''
let sections = []

function write () {
  let titles = []

  append(read(__dirname, '..', 'index.js'))

  function wrapLink (str, i) {
    const selected = i === 0 ? 'selected' : ''

    return `
      <li>
        <a href="#${str.toLowerCase()}" class="${selected}">${str}</a>
      </li>
    `
  }

  function wrapSection (str, title) {
    return `<section id="${title.toLowerCase()}">${str}</section>`
  }

  for (const dir of dirs) {
    let s = read(componentsDir, dir, 'README.md')

    const html = read(componentsDir, dir, 'readme.html')
    s = s.replace(/%html%/g, html)

    const js = read(componentsDir, dir, 'readme.js')
    append(js)
    s = s.replace(/%js%/g, js)

    if (s) {
      const { 0: match } = /^#\s*(.*)[\n|\r]/.exec(s)
      if (!match) continue

      const title = match.slice(1).trim()
      titles.push(title)
      sections.push({ title, content: wrapSection(marked(s), title) })
    }
  }

  titles = titles.sort((a, b) => a.localeCompare(b))

  titles.unshift('Intro')
  titles.push('Custom')
  titles.push('APIs')
  titles = titles.map(wrapLink)

  toc = `<ul>${titles.join('')}</ul>`
}

write()

sections = sections
  .sort((a, b) => a.title.localeCompare(b.title))
  .map(section => section.content)

const html = page(toc, sections.join(''))

fs.writeFileSync(outputFile, html)
