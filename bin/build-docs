#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const marked = require('marked')
const hl = require('highlight.js')
const fetch = require('node-fetch')

marked.setOptions({
  highlight: (code, lang = 'javascript', escaped) => {
    return hl.highlight(lang, code).value
  }
})

const componentsDir = path.join(__dirname, '..', 'src')
const docsDir = path.join(__dirname, '..', 'docs')
const devsDir = path.join(docsDir, 'src', 'developer')

function write (...args) {
  const data = args.pop()
  fs.writeFileSync(path.join(...args), data)
}

function read (...args) {
  try {
    return fs.readFileSync(path.join(...args), 'utf8')
  } catch (e) {
    return ''
  }
}

function bundle (s) {
  return fs.appendFileSync(path.join(docsDir, 'bundle.js'), s)
}

function createPage (data) {
  data = data.sort((a, b) => {
    if (a.title === 'API' || b.title === 'API') return -1
    return a.title.localeCompare(b.title)
  })

  const i = data.findIndex(d => d.title === 'Intro')
  data.splice(0, 0, data.splice(i, 1)[0])

  const toc = data.map(data => data.link).join('\n')
  const sections = data.map(data => data.section).join('\n')

  return `
    <!DOCTYPE html>

      ${read(docsDir, 'src', 'head.html')}

      <body>
        <div class="theme-picker">
          <svg>
            <use xlink:href="./sprite.svg#theme">
          </svg>
        </div>
        <nav>
          <a href="./index.html" class="logo">
            <svg>
              <use xlink:href="./sprite.svg#tonic_logo">
            </svg>
          </a>

          <div class="page-selection">
            <a href="./index.html" class="current">Components</a>
            <a href="./developer.html">Developer</a>
          </div>

          <ul>
            ${toc}
          </ul>

        </nav>
        <main>

          ${sections}

          <footer>
            <a href="#">
              <span>Made by</span>
              <svg>
                <use xlink:href="./sprite.svg#cl_logo">
              </svg>
            </a>
          </footer>
        </main>
        <script src="bundle.js"></script>
      </body>
    </html>
  `
}

let componentDocs = []
let developerDocs = []

function wrapLink (title, selected) {
  const id = title.replace(/\s/g, '-').toLowerCase()

  return `
    <li>
      <a href="#${id}" class="${selected || ''}">${title}</a>
    </li>
  `
}

function wrapSection (str, title, group) {
  const id = title.replace(/\s/g, '-').toLowerCase()

  return `
    <section id="${id}">
      ${str}
    </section>
  `
}

function parseHeading (s) {
  const { 0: match } = /^#\s*(.*)[\n|\r]/.exec(s)
  if (!match) throw new Error('No heading found in doc')

  return match.slice(1).trim()
}

async function compile () {
  const customFiles = fs.readdirSync(devsDir)

  for (const file of customFiles) {
    let s = read(devsDir, file)
    if (!s) continue

    const title = parseHeading(s)
    developerDocs.push({
      title,
      link: wrapLink(title),
      section: wrapSection(marked(s), title)
    })
  }

  const componentDirs = fs.readdirSync(componentsDir)

  for (const dir of componentDirs) {
    let s = read(componentsDir, dir, 'README.md')
    if (!s) continue

    const demoHTML = read(componentsDir, dir, 'readme.html')
    s = s.replace(/%html%/g, demoHTML)

    const demoJS = read(componentsDir, dir, 'readme.js')
    s = s.replace(/%js%/g, demoJS)

    bundle(demoJS)

    const title = parseHeading(s)

    componentDocs.push({
      title,
      link: wrapLink(title),
      section: wrapSection(marked(s), title)
    })
  }

  {
    //
    // Add the API as a section
    //
    const title = 'API'
    const url = 'https://raw.githubusercontent.com/hxoht/tonic/master/API.md'
    const s = await (await fetch(url)).text()

    developerDocs.push({
      title,
      link: wrapLink(title, 'custom'),
      section: wrapSection(marked(s), title, 'custom')
    })
  }

  const intro = read(docsDir, 'src', 'intro.html')

  componentDocs.unshift({
    title: 'Intro',
    link: wrapLink('Intro', 'selected'),
    section: wrapSection(intro, 'Intro')
  })
}

async function main () {
  //
  // Copy the build into the demo page bundle
  //
  bundle(read(__dirname, '..', 'index.js'))

  //
  // Bundle the demo code for each component and compile
  // the markdown into an array of sections.
  //
  await compile()

  //
  // Template the sections and write to html files.
  //
  write(docsDir, 'index.html', createPage(componentDocs))
  write(docsDir, 'developer.html', createPage(developerDocs))
}

main()
